github
1. Issues
- 본인이 하려는 issue에 들어가서 Assignees 설정
- Development에 branch 연결하고 작업 후 Merge
- issue 처리했으면 close
- 이렇게 쓰는 게 맞는지는 몰?루

2. Projects
- 괜히 만들었나
- 굳이 쓸 거면 노션 todo list처럼 진행 중이면 in progress로 옮기면 됨



git(CLI)
1. repository 연결
- $ git remote add origin URL // URL의 원격 repository와 연결
- $ git clone URL // repository에 있는 파일 복제
- $ git remote -v // remote repository와 연결되었는지 확인
-> origin URL (fetch)
-> origin URL (push) // 정상적으로 연결되면 이렇게 뜸

2. 파일 repository(저장소)로 옮기기
- Repository 구조: 작업 폴더(Working Directory) -> 인덱스(Staging Area, 작업 폴더와 repository 사이의 가상 공간) -> 저장소(Repository)

- $ git add . // 현재 디렉토리의 모든 파일을 Staging area로 옮겨 git이 파일을 tracking 함
- $ git status // git 저장소의 상태를 확인
- $ git rm --cached // 인덱스에 추가된 파일 untracking
- $ git commit -m "commit에 대한 설명 message" // staging area에 있는 파일들의 변경 사항을 저장하고 새로운 버전을 만듦. message: 이전 버전과의 차이점
- $ git log // 커밋 history, -p: 각 커밋의 diff 결과를 보여줌(동료가 뭘 커밋했는지 빠르게 조회 가능)
- $ git pull // Clone한 서버에서 데이터를 fetch 후 자동으로 현재 작업하는 코드와 merge함, push하기 전에 해야 함
- $ git push -u origin branch_name(모르겠으면 main) // commit한 것들 원격 저장소에 push, 처음 push할 때만 -u 붙이고 이후엔 빼도 됨. username, password 입력하라고 하면 https://gihyun.com/143 참고

3. branch 사용하기
- $ git branch // branch 목록 조회
- $ git branch branch_name // branch_name이라는 이름으로 branch 만듦
- $ git checkout branch_name // branch_name으로 branch 이동
// $ git checkout -b branch_name // branch_name으로 branch를 만들고 이동까지 해줌
- $ git merge branch_name // 다른 브랜치를 현재 브랜치로 통합, main과 합칠 거면 main으로 checkout한 후 해야 함
- $ git branch -d branch_name // 로컬에서 branch delete, merge가 끝난 후 안 쓰는 branch 삭제
- $ git push origin --delete remotebranch_name // 원격에서 branch delete


참고 자료
https://git-scm.com/book/ko/v2/Git%EC%9D%98-%EA%B8%B0%EC%B4%88-Git-%EC%A0%80%EC%9E%A5%EC%86%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0
https://backlog.com/git-tutorial/kr/
